###
# Elm Snippets
#
##


snippet doc
	{-| ${1}
	-}


snippet fun "Function"
	${1:foo} : ${2:()}
	$1 ${3} =
		${4:()}


snippet import "Import statement"
	import ${1} ${2:exposing(${3:..})}


snippet module "Module definition"
	module ${1:`Filename()`} ${2:exposing (${3:..})}


snippet main-sandbox "Browser.sandbox application"
	module Main exposing (..)

	import Html exposing(Html)
	import Browser


	type alias Model =
		{
		}


	type Msg
		= None


	main : Program () Model Msg
	main =
		Browser.sandbox
			{ init = init
			, update = update
			, view = view
			}


	init : Model
	init =
		{}


	update : Msg -> Model -> Model
	update msg model =
		case msg of
			None ->
				model


	view : Model -> Html Msg
	view model =
		Html.div
			[]
			[ Html.h1
			  	[]
				[ Html.text "Sandbox"
				]
			]


###
#
##
snippet main-element "Browser.element application"
	module Main exposing (..)

	import Html exposing(Html)
	import Browser


	type alias Model =
		{
		}


	type Msg
		= None


	type alias Flags =
		()


	main : Program Flags Model Msg
	main =
		Browser.element
			{ init = init
			, subscriptions = subscriptions
			, update = update
			, view = view
			}


	init : Flags -> ( Model, Cmd Msg )
	init flags =
		( {}, Cmd.none )


	subscriptions : Model -> Sub msg
	subscriptions model =
		Sub.none


	update : Msg -> Model -> ( Model, Cmd Msg )
	update msg model =
		case msg of
			None ->
				( model, Cmd.none )


	view : Model -> Html Msg
	view model =
		Html.div
			[]
			[ Html.h1
			  	[]
				[ Html.text "Element"
				]
			]

