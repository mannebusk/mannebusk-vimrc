###
# Elm Snippets
#
##


snippet doc
	{-| ${1}
	-}


snippet fun "Function"
	${1:foo} : ${2:()}
	$1 ${3} =
		${4:()}


snippet import "Import statement"
	import ${1} ${2:exposing(${3:..})}


snippet module "Module definition"
	module ${1:`Filename()`} ${2:exposing (${3:..})}


snippet main-sandbox "Browser.sandbox application"
	module Main exposing (..)

	import Html exposing(Html)
	import Browser


	type alias Model =
		{
		}


	type Msg
		= None


	main : Program () Model Msg
	main =
		Browser.sandbox
			{ init = init
			, update = update
			, view = view
			}


	init : Model
	init =
		{}


	update : Msg -> Model -> Model
	update msg model =
		case msg of
			None ->
				model


	view : Model -> Html Msg
	view model =
		Html.div
			[]
			[ Html.h1
			  	[]
				[ Html.text "Sandbox"
				]
			]


snippet main-element "Browser.element application"
	module Main exposing (..)

	import Html exposing(Html)
	import Browser


	type alias Model =
		{
		}


	type Msg
		= None


	type alias Flags =
		()


	main : Program Flags Model Msg
	main =
		Browser.element
			{ init = init
			, subscriptions = subscriptions
			, update = update
			, view = view
			}


	init : Flags -> ( Model, Cmd Msg )
	init flags =
		( {}, Cmd.none )


	subscriptions : Model -> Sub msg
	subscriptions model =
		Sub.none


	update : Msg -> Model -> ( Model, Cmd Msg )
	update msg model =
		case msg of
			None ->
				( model, Cmd.none )


	view : Model -> Html Msg
	view model =
		Html.div
			[]
			[ Html.h1
			  	[]
				[ Html.text "Element"
				]
			]

snippet comp-ui "Actor Model - UI Component"
	module ${1:ComponentName} exposing
		( MsgIn(..)
		, MsgOut(..)
		, Model
		, component
		)

	import Html exposing (Html)
	import Html.Attributes as HA
	import Webbhuset.Component as Component exposing (PID)
	import Webbhuset.Component.SystemEvent as SystemEvent exposing (SystemEvent)


	type MsgIn
		= NoIn


	type MsgOut
		= NoOut


	type alias Model =
		{ pid : PID
		}


	component : Component.UI Model MsgIn MsgOut
	component =
		{ init = init
		, update = update
		, view = view
		, onSystem = onSystem
		, subs = subs
		}


	init : PID -> ( Model , List MsgOut, Cmd MsgIn )
	init pid =
		( { pid = pid
		  }
		, []
		, Cmd.none
		)


	onSystem : SystemEvent -> SystemEvent.Handling MsgIn
	onSystem event =
		SystemEvent.default


	subs : Model -> Sub MsgIn
	subs model =
		Sub.none


	update : MsgIn -> Model -> ( Model, List MsgOut, Cmd MsgIn )
	update msgIn model =
		case msgIn of
			NoIn ->
				( model
				, []
				, Cmd.none
				)


	view : Model -> Html MsgIn
	view model =
		Html.div
			[]
			[ Html.text "Empty Component"
			]


snippet comp-layout "Actor Model - Layout Component"
	module ${1:ComponentName} exposing
		( MsgIn(..)
		, MsgOut(..)
		, Model
		, component
		)

	import Html exposing (Html)
	import Html.Attributes as HA
	import Webbhuset.Component as Component exposing (PID)
	import Webbhuset.Component.SystemEvent as SystemEvent exposing (SystemEvent)


	type MsgIn
		= NoIn


	type MsgOut
		= NoOut


	type alias Model =
		{ pid : PID
		}


	component : Component.Layout Model MsgIn MsgOut
	component =
		{ init = init
		, update = update
		, view = view
		, onSystem = onSystem
		, subs = subs
		}


	init : PID -> ( Model , List MsgOut, Cmd MsgIn )
	init pid =
		( { pid = pid
		  }
		, []
		, Cmd.none
		)


	onSystem : SystemEvent -> SystemEvent.Handling MsgIn
	onSystem event =
		SystemEvent.default


	subs : Model -> Sub MsgIn
	subs model =
		Sub.none


	update : MsgIn -> Model -> ( Model, List MsgOut, Cmd MsgIn )
	update msgIn model =
		case msgIn of
			NoIn ->
				( model
				, []
				, Cmd.none
				)



	view : (MsgIn -> msg) -> Model -> (PID -> Html msg) -> Html msg
	view toSelf model renderPID =
		Html.div
			[]
			[ Html.text "Empty Layout Component"
			]

snippet comp-service "Actor Model - Service Component"
	module ${1:ComponentName} exposing
		( Config
		, MsgIn(..)
		, MsgOut(..)
		, Model
		, component
		)

	import Webbhuset.Component as Component exposing (PID)
	import Webbhuset.Component.SystemEvent as SystemEvent exposing (SystemEvent)


	type MsgIn
		= NoIn


	type MsgOut
		= NoOut


	type alias Model =
		{ pid : PID
		}


	component : Component.Service Model MsgIn MsgOut
	component =
		{ init = init
		, update = update
		, onSystem = onSystem
		, subs = subs
		}


	init : PID -> ( Model , List MsgOut, Cmd MsgIn )
	init pid =
		( { pid = pid
		  }
		, []
		, Cmd.none
		)


	onSystem : SystemEvent -> SystemEvent.Handling MsgIn
	onSystem event =
		SystemEvent.default


	subs : Model -> Sub MsgIn
	subs model =
		Sub.none


	update : MsgIn -> Model -> ( Model, List MsgOut, Cmd MsgIn )
	update msgIn model =
		case msgIn of
			NoIn ->
				( model
					|> InitState
				, []
				, Cmd.none
				)


snippet sand-ui "Actor Model - UI Sandbox"
	module ${1:ComponentSandbox} exposing (..)

	import Webbhuset.Component.Sandbox as Sandbox exposing (SandboxProgram)
	import Webbhuset.PID as PID
	import ${2:Component} as ${3:ComponentAlias}
	import Html exposing (Html)
	import Html.Attributes as HA


	type alias Model = $3.Model
	type alias MsgIn = $3.MsgIn
	type alias MsgOut = $3.MsgOut


	main : SandboxProgram Model MsgIn MsgOut
	main =
		Sandbox.ui
			{ title = "UI Component"
			, component = $3.component
			, cases =
				[ test_init
				]
			, stringifyMsgIn = Debug.toString
			, stringifyMsgOut = Debug.toString
			, wrapView = view
			}


	test_init : Sandbox.TestCase MsgIn MsgOut
	test_init =
		{ title = "Test init"
		, desc = ""
		, init =
			[ Sandbox.sendMsg $3.NoIn
			]
		, onMsgOut =
			(\msgOut ->
				case msgOut of
					_ ->
						[]
			)
		}


	view : Html MsgIn -> Html MsgIn
	view componentHtml =
		Html.div
			[ HA.class "component"
			]
			[ Html.node "style" [] [ Html.text css ]
			, componentHtml
			]


	css : String
	css =
		"""
		.component {
		}
	"""

snippet sand-layout "Actor Model - Layout Sandbox"
	module ${1:ComponentSandbox} exposing (..)

	import Webbhuset.Component.Sandbox as Sandbox exposing (SandboxProgram)
	import Webbhuset.PID as PID
	import ${2:Component} as ${3:ComponentAlias}
	import Html exposing (Html)
	import Html.Attributes as HA


	type alias Model = $3.Model
	type alias MsgIn = $3.MsgIn
	type alias MsgOut = $3.MsgOut


	main : SandboxProgram Model MsgIn MsgOut
	main =
		Sandbox.layout
			{ title = "UI Component"
			, component = $3.component
			, cases =
				[ test_init
				]
			, stringifyMsgIn = Debug.toString
			, stringifyMsgOut = Debug.toString
			, wrapView = view
			}


	test_init : Sandbox.TestCase MsgIn MsgOut
	test_init =
		{ title = "Test init"
		, desc = ""
		, init =
			[ Sandbox.sendMsg $3.NoIn
			]
		, onMsgOut =
			(\msgOut ->
				case msgOut of
					_ ->
						[]
			)
		}


	view : (MsgIn -> msg) -> Html msg -> Html msg
	view toSelf componentHtml =
		Html.div
			[ HA.class "component"
			]
			[ Html.node "style" [] [ Html.text css ]
			, componentHtml
			]


	css : String
	css =
		"""
		.component {
		}
	"""

snippet sand-service "Actor Model - Layout Sandbox"
	module ${1:ComponentSandbox} exposing (..)

	import Webbhuset.Component.Sandbox as Sandbox exposing (SandboxProgram)
	import Webbhuset.PID as PID
	import ${2:Component} as ${3:ComponentAlias}
	import Html exposing (Html)
	import Html.Attributes as HA


	type alias Model = $3.Model
	type alias MsgIn = $3.MsgIn
	type alias MsgOut = $3.MsgOut


	main : SandboxProgram Model MsgIn MsgOut
	main =
		Sandbox.service
			{ title = "UI Component"
			, component = $3.component
			, cases =
				[ test_init
				]
			, stringifyMsgIn = Debug.toString
			, stringifyMsgOut = Debug.toString
			, wrapView = view
			}


	test_init : Sandbox.TestCase MsgIn MsgOut
	test_init =
		{ title = "Test init"
		, desc = ""
		, init =
			[ Sandbox.sendMsg $3.NoIn
			]
		, onMsgOut =
			(\msgOut ->
				case msgOut of
					_ ->
						[]
			)
		}


	view : Model -> Html msg -> Html msg
	view model componentHtml =
		Html.div
			[ HA.class "component"
			]
			[ Html.node "style" [] [ Html.text css ]
			, componentHtml
			]


	css : String
	css =
		"""
		.component {
		}
	"""

snippet actor-ui "Actor Model - Actor"
	module ${1:ActorModule} exposing (..)

	import Webbhuset.ActorSystem as System
	import Webbhuset.Actor as Actor exposing (Actor)
	import Webbhuset.PID exposing (PID)
	import Msg as Msg exposing (Msg)
	import ${2:ComponentName} as ${3:ComponentAlias}


	type alias Model =
		$3.Model

	actor : ($3.Model -> appModel) -> Actor Model appModel Msg
	actor toAppModel =
		Actor.fromUI
			{ wrapModel = toAppModel
			, wrapMsg = Msg.$3
			, mapIn = mapIn
			, mapOut = mapOut
			}
			$3.component


	mapIn : Msg.AppMsg -> Maybe $3.MsgIn
	mapIn appMsg =
		case appMsg of
			Msg.$3 msgIn ->
				Just msgIn

			_ ->
				Nothing


	mapOut : PID -> $3.MsgOut -> Msg
	mapOut ownPID msgOut =
		case msgOut of
			_ ->
				System.none
